name: CI/CD Pipeline for Beta

on:
  push:
    branches: [beta]
  pull_request:
    branches: [beta]
  workflow_dispatch: # Cho phép trigger thủ công

env:
  NODE_VERSION: '20'

jobs:
  # Job 2: Build
  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build application
        run: |
          npm run build
          echo "✅ Build completed"

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-files
          path: |
            dist/
            package*.json
            node_modules/
          retention-days: 1

  # Job 3: Deploy to WSL
  deploy:
    name: 🚀 Deploy to WSL
    runs-on: ubuntu-latest
    environment: wsl-nestjs-upload
    needs: [build]
    if: github.ref == 'refs/heads/beta' && github.event_name == 'push'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📤 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-files

      - name: 🔐 Setup SSH
        run: |
          mkdir -p ~/.ssh
          
          # Setup SSH key if available
          if [ -n "${{ secrets.WSL_SSH_PRIVATE_KEY }}" ]; then
            echo "${{ secrets.WSL_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
            chmod 600 ~/.ssh/id_rsa
            echo "✅ SSH Key configured"
          else
            echo "⚠️ No SSH key found, will use password authentication"
          fi

          # Debug: Check connection details
          echo "WSL_HOST: ${{ secrets.WSL_HOST }}"
          echo "WSL_PORT: ${{ secrets.WSL_PORT }}"
          echo "WSL_USER: ${{ secrets.WSL_USER }}"

          # Add host key with port
          ssh-keyscan -p ${{ secrets.WSL_PORT }} -H ${{ secrets.WSL_HOST }} >> ~/.ssh/known_hosts 2>/dev/null || true

          # Install sshpass for password authentication
          sudo apt-get update && sudo apt-get install -y sshpass

          echo "✅ SSH environment configured"

      - name: 🔍 Connection Troubleshooting
        run: |
          echo "🔍 Running connection diagnostics..."
          
          # Test basic connectivity
          echo "Testing connectivity to ${{ secrets.WSL_HOST }}:${{ secrets.WSL_PORT }}..."
          timeout 10 bash -c "</dev/tcp/${{ secrets.WSL_HOST }}/${{ secrets.WSL_PORT }}" && echo "✅ Port is reachable" || echo "❌ Port is not reachable"
          
          # Try to ping the host
          echo "Pinging host..."
          ping -c 3 "${{ secrets.WSL_HOST }}" || echo "❌ Ping failed"
          
          # Test with telnet
          echo "Testing with telnet..."
          timeout 5 telnet "${{ secrets.WSL_HOST }}" "${{ secrets.WSL_PORT }}" || echo "❌ Telnet connection failed"
          
          echo "🔍 Diagnostics completed"

      - name: ✅ Validate Secrets
        run: |
          echo "🔍 Validating required secrets..."

          if [ -z "${{ secrets.WSL_USER }}" ]; then
            echo "❌ Error: WSL_USER secret is not set"
            echo "Go to Settings → Secrets and variables → Actions → New repository secret"
            echo "Name: WSL_USER, Value: your-wsl-username"
            exit 1
          fi

          if [ -z "${{ secrets.WSL_HOST }}" ]; then
            echo "❌ Error: WSL_HOST secret is not set"
            echo "Go to Settings → Secrets and variables → Actions → New repository secret"
            echo "Name: WSL_HOST, Value: your-wsl-ip-address"
            exit 1
          fi

          if [ -z "${{ secrets.WSL_PORT }}" ]; then
            echo "❌ Error: WSL_PORT secret is not set"
            echo "Go to Settings → Secrets and variables → Actions → New repository secret"
            echo "Name: WSL_PORT, Value: 22 (or your SSH port)"
            exit 1
          fi

          # Check authentication method
          if [ -z "${{ secrets.WSL_SSH_PRIVATE_KEY }}" ] && [ -z "${{ secrets.WSL_PASSWORD }}" ]; then
            echo "❌ Error: Either WSL_SSH_PRIVATE_KEY or WSL_PASSWORD must be set"
            echo "For SSH Key authentication:"
            echo "  Name: WSL_SSH_PRIVATE_KEY, Value: your-private-ssh-key-content"
            echo "For Password authentication:"
            echo "  Name: WSL_PASSWORD, Value: your-ssh-password"
            exit 1
          fi

          if [ -n "${{ secrets.WSL_SSH_PRIVATE_KEY }}" ]; then
            echo "✅ Using SSH Key authentication"
          elif [ -n "${{ secrets.WSL_PASSWORD }}" ]; then
            echo "✅ Using Password authentication"
          fi

          echo "✅ All required secrets are configured"

      - name: 🚀 Deploy to WSL
        run: |
          echo "🚀 Starting deployment to WSL..."
          echo "Connecting to: ${{ secrets.WSL_USER }}@${{ secrets.WSL_HOST }}:${{ secrets.WSL_PORT }}"

          # Determine authentication method and set SSH command
          if [ -n "${{ secrets.WSL_SSH_PRIVATE_KEY }}" ]; then
            echo "🔑 Using SSH Key authentication"
            SSH_CMD="ssh -p ${{ secrets.WSL_PORT }} -o ConnectTimeout=30 -o StrictHostKeyChecking=no"
            RSYNC_SSH="ssh -p ${{ secrets.WSL_PORT }} -o StrictHostKeyChecking=no"
          elif [ -n "${{ secrets.WSL_PASSWORD }}" ]; then
            echo "🔒 Using Password authentication"
            export SSHPASS="${{ secrets.WSL_PASSWORD }}"
            SSH_CMD="sshpass -e ssh -p ${{ secrets.WSL_PORT }} -o ConnectTimeout=30 -o StrictHostKeyChecking=no"
            RSYNC_SSH="sshpass -e ssh -p ${{ secrets.WSL_PORT }} -o StrictHostKeyChecking=no"
          else
            echo "❌ No authentication method available"
            exit 1
          fi

          # Test SSH connection first
          echo "🔍 Testing SSH connection..."
          $SSH_CMD "${{ secrets.WSL_USER }}@${{ secrets.WSL_HOST }}" "echo 'SSH connection successful'"

          # Sync files to WSL
          echo "📁 Syncing files..."
          rsync -avz --delete \
            -e "$RSYNC_SSH" \
            ./ "${{ secrets.WSL_USER }}@${{ secrets.WSL_HOST }}:~/projects/nestjs-demo/"

          # Run deployment commands on WSL
          echo "🔧 Running deployment commands..."
          $SSH_CMD "${{ secrets.WSL_USER }}@${{ secrets.WSL_HOST }}" << 'EOF'
            # Load Node.js environment
            source ~/.bashrc || source ~/.profile || true

            cd ~/projects/nestjs-demo

            echo "📦 Installing production dependencies..."
            npm ci --omit=dev

            echo "🏗️ Building application..."
            npm run build

            echo "🔄 Restarting application with PM2..."
            pm2 stop nestjs-demo || true
            pm2 start dist/main.js --name nestjs-demo --env production
            pm2 save

            echo "✅ Deployment completed!"
          EOF
        env:
          DISCORD_TOKEN: ${{ secrets.DISCORD_TOKEN }}
          DISCORD_DEVELOPMENT_GUILD_ID: ${{ secrets.DISCORD_DEVELOPMENT_GUILD_ID }}
          ERROR_CHANNEL_ID: ${{ secrets.ERROR_CHANNEL_ID }}

      - name: 🏥 Health Check
        run: |
          echo "⏳ Waiting for application to start..."
          sleep 15

          echo "🏥 Performing health check..."
          for i in {1..5}; do
            if curl -s -f "http://${{ secrets.WSL_HOST }}:3000/health" >/dev/null; then
              echo "✅ Health check passed!"
              exit 0
            fi
            echo "⏳ Attempt $i failed, retrying in 10s..."
            sleep 10
          done

          echo "❌ Health check failed after 5 attempts"
          exit 1

      - name: 🔔 Notify Success
        if: success()
        run: |
          echo "🎉 Deployment to WSL Beta Environment Successful!"
          echo "🌐 Application URL: http://${{ secrets.WSL_HOST }}:3000"
          echo "📝 Commit: ${{ github.sha }}"
          echo "👤 Author: ${{ github.actor }}"
